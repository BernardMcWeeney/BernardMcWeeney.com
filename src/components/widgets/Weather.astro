---
// components/widgets/Weather.astro
// This component fetches live weather data from the production API endpoint for Phoenix Park, Ireland,
// maps weather symbol codes to emojis.
// It runs entirely on the client side.
---
<div class="weather-widget font-mono">
  <div class="bg-black/5 dark:bg-white/5 border-2 border-border p-3">
    <pre id="weather-output" class="p-0 m-0 text-sm whitespace-pre-line">
$ weather --location="Phoenix Park, Ireland"

<span class="text-orange-500">⚡ Loading weather data...</span>
    </pre>
  </div>
  
  <div class="pt-4 mt-4 border-t-2 border-border text-center">
    <a 
      href="#" 
      class="inline-flex items-center justify-center font-mono text-xs hover:text-orange-500 transition-colors duration-300"
      id="refresh-weather"
    >
      <span>Refresh Weather Data</span>
      <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3 ml-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd" />
      </svg>
    </a>
  </div>
  
  <div class="attribution text-center text-xs mt-4">
    Data provided by <a href="https://www.met.ie" target="_blank" rel="noopener noreferrer">met.ie (Met Éireann)</a>
  </div>
</div>

<script>
  // Fetch the latest weather data for Phoenix Park
  async function fetchWeatherData() {
    const weatherOutput = document.getElementById('weather-output');
    weatherOutput.innerHTML = '$ weather --location="Phoenix Park, Ireland"\n\n<span class="text-orange-500">⚡ Loading weather data...</span>';
    try {
      const response = await fetch('https://prodapi.metweb.ie/observations/PhoenixPark/today');
      const data = await response.json();
      if (!Array.isArray(data) || data.length === 0) {
        throw new Error("No weather data available.");
      }
      
      // Assume data is sorted in ascending order by reportTime; pick the latest observation.
      const latest = data[data.length - 1];
      
      // Convert temperature from Celsius to Fahrenheit
      const tempC = parseFloat(latest.temperature);
      const tempF = Math.round((tempC * 9/5) + 32);
      
      // Map the weather symbol to an emoji for a visual representation.
      const weatherEmojis = {
        '01d': '☀️',    // Clear day
        '01n': '🌙',    // Clear night
        '02d': '⛅',    // Few clouds day
        '02n': '🌤️',   // Few clouds night
        '03d': '☁️',    // Scattered clouds
        '03n': '☁️',
        '04d': '🌥️',   // Broken clouds
        '04n': '🌥️',
        '09d': '🌧️',   // Shower rain
        '09n': '🌧️',
        '10d': '🌦️',   // Rain day
        '10n': '🌧️',   // Rain night
        '11d': '⛈️',   // Thunderstorm
        '11n': '⛈️',
        '13d': '❄️',   // Snow
        '13n': '❄️',
        '50d': '🌫️',   // Mist
        '50n': '🌫️'
      };
      const emoji = weatherEmojis[latest.symbol] || '';
      
      // Build the weather output text
      const output = `$ weather --location="Phoenix Park, Ireland"\n\n<span class="text-green-500">✓ Data retrieved successfully.</span>\n\n` +
                     `Location: Phoenix Park, Ireland\n` +
                     `Temperature: ${tempF}°F / ${tempC}°C ${emoji}\n` +
                     `Condition: ${latest.weatherDescription}\n` +
                     `Humidity: ${latest.humidity.trim()}%\n` +
                     `Wind: ${latest.windSpeed} mph ${latest.cardinalWindDirection}\n` +
                     `Report Time: ${latest.reportTime}`;
      
      weatherOutput.innerHTML = output;
      
    } catch (error) {
      weatherOutput.innerHTML = `$ weather --location="Phoenix Park, Ireland"\n\n` +
                                `<span class="text-red-500">✖ Error loading weather data: ${error.message}</span>`;
    }
  }
  
  // Refresh weather data
  async function refreshWeather() {
    await Promise.all([fetchWeatherData()]);
  }
  
  // Initialize the widget on page load and set up the refresh button
  document.addEventListener('DOMContentLoaded', () => {
    refreshWeather();
    document.getElementById('refresh-weather')?.addEventListener('click', (e) => {
      e.preventDefault();
      refreshWeather();
    });
  });
</script>
